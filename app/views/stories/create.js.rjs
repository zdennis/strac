page[:notice].replace_html %("#{@story.summary}" was successfully created.)
page[:error].hide
page[:notice].show
page.visual_effect :appear, :notice
page.delay( 5 ) {  page.visual_effect :fade, :notice }

render_with :stories do |stories|
  stories.add_to_story_list @story
end

bucket_id = "iteration_#{@story.bucket ? @story.bucket.id : 'nil'}"

iteration_list_ids = [ "iteration_nil" ] + @project.iterations.map{ |i| "iteration_#{i.id}" }
page.sortable bucket_id, :url => reorder_stories_path(@project), :method => :put,
                            :tag => 'div', :handle => 'draggable', :dropOnEmpty => true, :containment => iteration_list_ids

@story = Story.new :bucket_id => @story.bucket_id # we want a fresh form
page["#{bucket_id}_story_new"].replace_html :partial => 'stories/new', :locals => { :story => @story }
page.call "Strac.Iteration.drawWorkspaceVelocityMarkers"
